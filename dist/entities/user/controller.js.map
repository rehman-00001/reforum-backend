{"version":3,"sources":["../../../backend/entities/user/controller.js"],"names":["_","require","asyncEach","getAllOpinions","User","Discussion","Opinion","getUser","user_id","Promise","resolve","reject","findOne","_id","error","user","console","log","getFullProfile","username","lean","exec","result","find","populate","discussions","eachDiscussion","callback","then","opinions","opinion_count","length","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash');\nconst asyncEach = require('async/each');\n\n// controllers\nconst getAllOpinions = require('../opinion/controller').getAllOpinions;\n\n// models\nconst User = require('./model');\nconst Discussion = require('../discussion/model');\nconst Opinion = require('../opinion/model');\n\n/**\n * get user doc by user id\n * @param  {ObjectId} user_id\n * @return {promise}\n */\nconst getUser = (user_id) => {\n  return new Promise((resolve, reject) => {\n    User.findOne({ _id: user_id }, (error, user) => {\n      if (error) {\n        console.log(error);\n        reject(error);\n      } else if (!user) reject(null);\n      else resolve(user);\n    });\n  });\n};\n\n/**\n * get the full profile of a user\n * @param  {String} username\n * @return {Promise}\n */\nconst getFullProfile = (username) => {\n  return new Promise((resolve, reject) => {\n    User.findOne({ username })\n      .lean()\n      .exec((error, result) => {\n        if (error) {\n          console.log(error);\n          reject(error);\n        } else if (!result) reject('not_found');\n        else {\n          // we got the user, now we need all discussions by the user\n          Discussion.find({ user_id: result._id })\n            .populate('forum')\n            .lean()\n            .exec((error, discussions) => {\n              if (error) {\n                console.log(error);\n                reject(error);\n              } else {\n                // we got the discussions by the user\n                // we need to add opinion count to each discussion\n                asyncEach(\n                  discussions,\n                  (eachDiscussion, callback) => {\n                    getAllOpinions(eachDiscussion._id).then(\n                      (opinions) => {\n                        // add opinion count to discussion doc\n                        eachDiscussion.opinion_count = opinions\n                          ? opinions.length\n                          : 0;\n                        callback();\n                      },\n                      (error) => {\n                        console.error(error);\n                        callback(error);\n                      }\n                    );\n                  },\n                  (error) => {\n                    if (error) {\n                      console.log(error);\n                      reject(error);\n                    } else {\n                      result.discussions = discussions;\n                      resolve(result);\n                    }\n                  }\n                );\n              }\n            });\n        }\n      });\n  });\n};\n\nmodule.exports = {\n  getUser,\n  getFullProfile,\n};\n"],"file":"controller.js"}