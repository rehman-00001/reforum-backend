{"version":3,"sources":["../../backend/utilities/tools.js"],"names":["deepPropSearch","obj","callback","newObj","deepSearch","prop","length","forEach","deepObj","generateDiscussionSlug","discussionTitle","ObjectId","require","Types","replace","toLowerCase","module","exports"],"mappings":";;;;;;;;AAAA;;;;;;;AAOA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,QAAN,EAAmB;AACxC;AACA,MAAMC,MAAM,GAAG,0BAAc,EAAd,EAAkBF,GAAlB,CAAf,CAFwC,CAIxC;;AACA,MAAMG,UAAU,GAAG,SAAbA,UAAa,CAACH,GAAD,EAAS;AAC1B,SAAK,IAAMI,IAAX,IAAmBJ,GAAnB,EAAwB;AACtB;AACAC,MAAAA,QAAQ,IAAIA,QAAQ,CAACG,IAAD,EAAOJ,GAAP,CAApB,CAFsB,CAItB;;AACA,UAAI,yBAAOA,GAAG,CAACI,IAAD,CAAV,MAAqB,QAAzB,EAAmC;AACjC,YAAIJ,GAAG,CAACI,IAAD,CAAH,CAAUC,MAAV,IAAoBL,GAAG,CAACI,IAAD,CAAH,CAAUC,MAAV,GAAmB,CAA3C,EAA8C;AAC5CL,UAAAA,GAAG,CAACI,IAAD,CAAH,CAAUE,OAAV,CAAkB,UAACC,OAAD,EAAa;AAC7BJ,YAAAA,UAAU,CAACI,OAAD,CAAV;AACD,WAFD;AAGD,SAJD,MAIO;AACLJ,UAAAA,UAAU,CAACH,GAAG,CAACI,IAAD,CAAJ,CAAV;AACD;AACF;AACF;AACF,GAhBD,CALwC,CAuBxC;;;AACAD,EAAAA,UAAU,CAACD,MAAD,EAASD,QAAT,CAAV,CAxBwC,CA0BxC;;AACA,SAAOC,MAAP;AACD,CA5BD;;AA8BA,IAAMM,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,eAAD,EAAqB;AAClD,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBC,KAApB,CAA0BF,QAA1B,EAAjB;;AACA,SAAOD,eAAe,CAACI,OAAhB,CAAwB,aAAxB,EAAuC,GAAvC,EAA4CC,WAA5C,KAA4D,GAA5D,GAAkEJ,QAAzE;AACD,CAHD;;AAKAK,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,cAAc,EAAdA,cADe;AAEfS,EAAAA,sBAAsB,EAAtBA;AAFe,CAAjB","sourcesContent":["/**\n * Search object properties recursively and\n * perform callback action on each\n * @param  {Object}   obj      [object to search props]\n * @param  {Function} callback [action to perform on each props, two parameters (property, object)]\n * @return {Object}            [new modified object]\n */\nconst deepPropSearch = (obj, callback) => {\n  // new object for immutability\n  const newObj = Object.assign({}, obj);\n\n  // recursive search function\n  const deepSearch = (obj) => {\n    for (const prop in obj) {\n      // perform callback for each property\n      callback && callback(prop, obj);\n\n      // recursive search inside objects/arrays\n      if (typeof obj[prop] === 'object') {\n        if (obj[prop].length && obj[prop].length > 0) {\n          obj[prop].forEach((deepObj) => {\n            deepSearch(deepObj);\n          });\n        } else {\n          deepSearch(obj[prop]);\n        }\n      }\n    }\n  };\n\n  // start deep searching for properties\n  deepSearch(newObj, callback);\n\n  // return new object, maintain immutability\n  return newObj;\n};\n\nconst generateDiscussionSlug = (discussionTitle) => {\n  const ObjectId = require('mongoose').Types.ObjectId();\n  return discussionTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '_' + ObjectId;\n};\n\nmodule.exports = {\n  deepPropSearch,\n  generateDiscussionSlug,\n};\n"],"file":"tools.js"}